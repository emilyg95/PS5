if (checkLength(object) != TRUE | checkSpacing(object) != TRUE | checkIntervals(object) != TRUE | checkRuleSimp(object) != TRUE){ ## returns an error message if either test does not pass
return("object is not a valid value")}
else{
return(TRUE)}
}
checkValiditySimpson(Simpson1) ## test
checkValiditySimpson(newSimpson(1:4, 1:5, "Simpson")) ## test
checkValiditySimpson(newSimpson(1:5, 1:4, "Simp")) ## test
setValidity("Simpson", checkValiditySimpson) ## sets checkValiditySimpson as the constraints for an object to be of class simpson
Simpson1 = newSimpson(1:4, 1:4, "Simpson") ## test
Simpson2 = newSimpson(1:5, 5:9, "Simpson") ## test
generic = function(object){ ## creates the interior function for set generic which takes as an input x, y, and rule
standardGeneric("integrateIt")
}
setGeneric("integrateIt", generic) ## sets the generic function of integrateIt as generic
setMethod("integrateIt", signature("Trapezoid"),
function(object){
x = object@x
y = object@y
Answer = Trap(x, y)
return(list(object, "Answer" = Answer))
}
)
integrateIt(Trap1) ## check
integrateIt(newTrapezoid(c(3,6,12,13), 1:4, "Trapezoid")) ## check
setMethod("integrateIt", signature("Simpson"),
function(object){
x = object@x
y = object@y
Answer = Simpson(x, y)
return(list(object, "Answer" = Answer))
}
)
integrateIt(newSimpson(1:5, 1:5, "Simpson"))
setMethod("print", signature("Trapezoid","Simpson"),
function(object){
x = object@x
y = object@y
if(object@rule == "Trapezoid"){
Answer = Trap(x, y)
print(Answer)
}
else if(object@rule == "Simpson"){
Answer = Simpson(x, y)
print(Answer)
}
}
)
setMethod("print", signature("Integral"),
function(object){
x = object@x
y = object@y
if(object@rule == "Trapezoid"){
Answer = Trap(x, y)
print(Answer)
}
else if(object@rule == "Simpson"){
Answer = Simpson(x, y)
print(Answer)
}
}
)
?print
setGeneric("print", function(object){
standardGeneric("print")}
)
setMethod("print", signature("Integral"),
function(object){
x = object@x
y = object@y
if(object@rule == "Trapezoid"){
Answer = Trap(x, y)
print(Answer)
}
else if(object@rule == "Simpson"){
Answer = Simpson(x, y)
print(Answer)
}
}
)
setMethod("print", signature("Trapezoid", "Simpson"),
function(object){
x = object@x
y = object@y
if(object@rule == "Trapezoid"){
Answer = Trap(x, y)
print(Answer)
}
else if(object@rule == "Simpson"){
Answer = Simpson(x, y)
print(Answer)
}
}
)
setMethod("print", signature("Integral"),
function(object){
x = object@x
y = object@y
if(object@rule == "Trapezoid"){
Answer = Trap(x, y)
print(Answer)
}
else if(object@rule == "Simpson"){
Answer = Simpson(x, y)
print(Answer)
}
}
)
print(Trap1)
print(newTrapezoid(1:4, 1:4, "Trapezoid"))
setGeneric("print", function(x, y, z){
standardGeneric("print")}
)
setMethod("print", signature("Integral"),
function(object){
x = object@x
y = object@y
if(object@rule == "Trapezoid"){
Answer = Trap(x, y)
print(Answer)
}
else if(object@rule == "Simpson"){
Answer = Simpson(x, y)
print(Answer)
}
}
)
print(newTrapezoid(1:4, 1:4, "Trapezoid"))
print((1:4, 1:4, "Trapezoid"))
print(1:4, 1:4, "Trapezoid")
newIntegral = function(x, y, z){ ## construction function takes in 3 arguments; x, y, and rule
object = new("Trapezoid", x = x, y = y, rule = z) ## creates a new object setting the 3 inputs as defined for class Trapezoid
return(object) ## returns the object
}
print(newIntegral(1:4, 1:4, "Trapezoid"))
newIntegral(1:4, 1:4, "Trapezoid")
newIntegral = function(x, y, z){ ## construction function takes in 3 arguments; x, y, and rule
object = new("Integral", x = x, y = y, rule = z) ## creates a new object setting the 3 inputs as defined for class Trapezoid
return(object) ## returns the object
}
newIntegral(1:4, 1:4, "Trapezoid")
setMethod("print", signature("Integral"),
function(object){
x = object@x
y = object@y
if(object@rule == "Trapezoid"){
Answer = Trap(x, y)
print(Answer)
}
else if(object@rule == "Simpson"){
Answer = Simpson(x, y)
print(Answer)
}
}
)
setGeneric("print", function(object){
standardGeneric("print")}
)
setMethod("print", signature("Integral"),
function(object){
x = object@x
y = object@y
if(object@rule == "Trapezoid"){
Answer = Trap(x, y)
print(Answer)
}
else if(object@rule == "Simpson"){
Answer = Simpson(x, y)
print(Answer)
}
}
)
newIntegral(1:4, 1:4, "Trapezoid")
Integral = newIntegral(1:4, 1:4, "Trapezoid")
print(Integral)
setMethod("print", signature("Integral"),
function(object){
x = object@x
y = object@y
if(object@rule == "Trapezoid"){
Answer = Trap(x, y)
return(Answer)
}
else if(object@rule == "Simpson"){
Answer = Simpson(x, y)
return(Answer)
}
}
)
Integral = newIntegral(1:4, 1:4, "Trapezoid")
print(Integral)
Integral1 = newIntegral(1:4, 1:4, "Simpson")
print(Integral1)
Integral1 = newIntegral(1:5, 1:4, "Simpson")
print(Integral1)
Simpson = function(x, y){ ## formula for simpson's rule that takes in arguments for x values and y values
a = min(x) ## defines minimum value of x
b = max(x) ## defines maximum value of x
n = length(x) ## defines the number of elements in x
h = ((b-a)/(n-1)) ## defines h as in trapezoidal rule (n-1 because a = x0 in the rule, not x1, so it should be a measure of the number of intervals not the number of points)
a_y = min(y) ## defines minimum value of y
b_y = max(y) ## defines maximum value of y
remove = c(a_y, b_y) ## creates a new vector of min and max y values
sub_y = setdiff(y, remove) ## creates a new vector of all y values except min and max
odd_y = seq(min(sub_y),max(sub_y),2) ## subsets the new vector of y values further into every other
even_y = seq(min(sub_y)+1,length(sub_y),2) ## takes the other half of the new vector of y values
s = (h/3)*(a_y + b_y + sum(4*odd_y) + sum(2*even_y)) ## calculates s as in simpson's rule
return(s)
}
Simpson(q, z) ## check
Integral1 = newIntegral(1:5, 1:5, "Simpson")
print(Integral1)
Integral1 = newIntegral(1:5, 6:10, "Simpson")
print(Integral1)
Integral1 = newIntegral(1:5, 5:10, "Simpson")
print(Integral1)
Integral1 = newIntegral(1:5, 5:9, "Simpson")
print(Integral1)
Simpson2 = newSimpson(1:5, 5:9, "Simpson") ## test
Simpson(1:5, 5:9)
?seq
Simpson = function(x, y){ ## formula for simpson's rule that takes in arguments for x values and y values
a = min(x) ## defines minimum value of x
b = max(x) ## defines maximum value of x
n = length(x) ## defines the number of elements in x
h = ((b-a)/(n-1)) ## defines h as in trapezoidal rule (n-1 because a = x0 in the rule, not x1, so it should be a measure of the number of intervals not the number of points)
a_y = min(y) ## defines minimum value of y
b_y = max(y) ## defines maximum value of y
remove = c(a_y, b_y) ## creates a new vector of min and max y values
sub_y = setdiff(y, remove) ## creates a new vector of all y values except min and max
odd_y = seq(min(sub_y),max(sub_y),2) ## subsets the new vector of y values further into every other
even_y = seq(min(sub_y)+1,max(sub_y),2) ## takes the other half of the new vector of y values
s = (h/3)*(a_y + b_y + sum(4*odd_y) + sum(2*even_y)) ## calculates s as in simpson's rule
return(s)
}
Simpson(q, z) ## check
Simpson(1:5, 5:9)
Integral1 = newIntegral(1:5, 5:9, "Simpson")
print(Integral1)
Integral2 = newIntegral(1:5, c(3,5,12,15), "Simpson")
print(Integral2)
Integral3 = newIntegral(1:5, c(3,5,12,15), "Trapezoid")
print(Integral3)
setMethod("print", signature("Integral"),
function(object){
x = object@x
y = object@y
if(object@rule == "Trapezoid"){
class(object) = append(class(object), "Trapezoid")
Answer = Trap(x, y)
return(Answer)
}
else if(object@rule == "Simpson"){
class(object) = append(class(object), "Simpson")
Answer = Simpson(x, y)
return(Answer)
}
}
)
Integral = newIntegral(1:4, 1:4, "Trapezoid")
print(Integral)
setMethod("print", signature("Integral"),
function(object){
x = object@x
y = object@y
if(object@rule == "Trapezoid"){
class(object) = "Trapezoid"
Answer = Trap(x, y)
return(Answer)
}
else if(object@rule == "Simpson"){
class(object) = "Simpson"
Answer = Simpson(x, y)
return(Answer)
}
}
)
Integral = newIntegral(1:4, 1:4, "Trapezoid")
print(Integral)
Integral1 = newIntegral(1:5, 5:9, "Simpson")
print(Integral1)
Integral2 = newIntegral(1:5, c(3,5,12,15), "Simpson")
print(Integral2)
Integral3 = newIntegral(1:5, c(3,5,12,15), "Trapezoid")
print(Integral3)
Integral2 = newIntegral(1:5, c(3,5,12,15), "Simpson")
setMethod("print", signature("Integral"),
function(object){
x = object@x
y = object@y
if(object@rule == "Trapezoid"){
setclass(object) = "Trapezoid"
Answer = Trap(x, y)
return(Answer)
}
else if(object@rule == "Simpson"){
setclass(object) = "Simpson"
Answer = Simpson(x, y)
return(Answer)
}
}
)
Integral = newIntegral(1:4, 1:4, "Trapezoid")
print(Integral)
?setClass
setMethod("print", signature("Integral"),
function(object){
x = object@x
y = object@y
if(object@rule == "Trapezoid"){
setClass(object) = "Trapezoid"
Answer = Trap(x, y)
return(Answer)
}
else if(object@rule == "Simpson"){
setClass(object) = "Simpson"
Answer = Simpson(x, y)
return(Answer)
}
}
)
Integral = newIntegral(1:4, 1:4, "Trapezoid")
print(Integral)
?class
setMethod("print", signature("Integral"),
function(object){
x = object@x
y = object@y
if(object@rule == "Trapezoid"){
class(object) = "Trapezoid"
Answer = Trap(x, y)
return(Answer)
}
else if(object@rule == "Simpson"){
class(object) = "Simpson"
Answer = Simpson(x, y)
return(Answer)
}
}
)
Integral = newIntegral(1:4, 1:4, "Trapezoid")
print(Integral)
class(Integral1)
setMethod("print", signature("Integral"),
function(object){
if(object@rule == "Trapezoid"){
Trapezoid = newTrapezoid(object)
x = Trapezoid@x
y = Trapezoid@y
Answer = Trap(x, y)
return(Answer)
}
else if(object@rule == "Simpson"){
class(object) = "Simpson"
Answer = Simpson(x, y)
return(Answer)
}
}
)
Integral = newIntegral(1:4, 1:4, "Trapezoid")
print(Integral)
setMethod("print", signature("Integral"),
function(object){
if(object@rule == "Trapezoid"){
Trapezoid = newTrapezoid(object@x, object@y, object@rule)
x = Trapezoid@x
y = Trapezoid@y
Answer = Trap(x, y)
return(Answer)
}
else if(object@rule == "Simpson"){
class(object) = "Simpson"
Answer = Simpson(x, y)
return(Answer)
}
}
)
Integral = newIntegral(1:4, 1:4, "Trapezoid")
print(Integral)
setMethod("print", signature("Integral"),
function(object){
if(object@rule == "Trapezoid"){
Trapezoid = newTrapezoid(object@x, object@y, object@rule)
x = Trapezoid@x
y = Trapezoid@y
Answer = Trap(x, y)
return(Answer)
}
else if(object@rule == "Simpson"){
Simpson = newSimpson(object@x, object@y, object@rule)
x = Simpson@x
y = Simpson@y
Answer = Simpson(x, y)
return(Answer)
}
}
)
Integral = newIntegral(1:4, 1:4, "Trapezoid")
print(Integral)
Integral1 = newIntegral(1:5, 5:9, "Simpson")
print(Integral1)
Integral2 = newIntegral(1:5, c(3,5,12,15), "Simpson")
print(Integral2)
Integral3 = newIntegral(1:5, c(3,5,12,15), "Trapezoid")
print(Integral3)
setGeneric("print", function(object){ ## creates a new
standardGeneric("print")}
)
print(Integral) ## test
Integral = newIntegral(1:4, 1:4, "Trapezoid") ## test integral
print(Integral) ## test
Integral1 = newIntegral(1:5, 5:9, "Simpson") ## test integral
print(Integral1) ## test
Integral2 = newIntegral(1:5, c(3,5,12,15), "Simpson") ## test integral
print(Integral2) ## test
Integral3 = newIntegral(1:5, c(3,5,12,15), "Trapezoid") ## test integral
print(Integral3) ## test
print(Integral) ## test
setMethod("print", signature("Integral"), ## creates a new method for print that takes objects of class integral (parent class of trapezoid and simpson)
function(object){
if(object@rule == "Trapezoid"){ ## creates a new object of class trapezoid using inputs if rule selected is trapezoid (so that validity tests designed for trapezoid will be run)
Trapezoid = newTrapezoid(object@x, object@y, object@rule)
x = Trapezoid@x ## defines x and y values from inputs
y = Trapezoid@y
Answer = Trap(x, y) ## runs Trap on x and y
return(Answer) ## returns output of Trap
}
else if(object@rule == "Simpson"){ ## creates a new object of class simpson using inputs if rule selected is simpson (so that validity tests designed for simpson will be run)
Simpson = newSimpson(object@x, object@y, object@rule)
x = Simpson@x  ## defines x and y values from inputs
y = Simpson@y
Answer = Simpson(x, y) ## runs Simpson on x and y
return(Answer) ## returns output of Simpson
}
}
)
Integral = newIntegral(1:4, 1:4, "Trapezoid") ## test integral
print(Integral) ## test
Integral4 = newIntegral(1:4, 1:4, "Sam") ## test integral
print(Integral) ## test
Integral4 = newIntegral(1:4, 1:4, "Sam") ## test integral
print(Integral) ## test
setMethod("print", signature("Integral"), ## creates a new method for print that takes objects of class integral (parent class of trapezoid and simpson)
function(object){
if(object@rule == "Trapezoid"){ ## creates a new object of class trapezoid using inputs if rule selected is trapezoid (so that validity tests designed for trapezoid will be run)
Trapezoid = newTrapezoid(object@x, object@y, object@rule)
x = Trapezoid@x ## defines x and y values from inputs
y = Trapezoid@y
Answer = Trap(x, y) ## runs Trap on x and y
return(Answer) ## returns output of Trap
}
else if(object@rule == "Simpson"){ ## creates a new object of class simpson using inputs if rule selected is simpson (so that validity tests designed for simpson will be run)
Simpson = newSimpson(object@x, object@y, object@rule)
x = Simpson@x  ## defines x and y values from inputs
y = Simpson@y
Answer = Simpson(x, y) ## runs Simpson on x and y
return(Answer) ## returns output of Simpson
}
else{
return("rule input must be Trapezoid or Simpson")
}
}
)
Integral = newIntegral(1:4, 1:4, "Trapezoid") ## test integral
print(Integral) ## test
Integral4 = newIntegral(1:4, 1:4, "Sam") ## test integral
print(Integral) ## test
setMethod("print", signature("Integral"), ## creates a new method for print that takes objects of class integral (parent class of trapezoid and simpson)
function(object){
if(object@rule == "Trapezoid"){ ## creates a new object of class trapezoid using inputs if rule selected is trapezoid (so that validity tests designed for trapezoid will be run)
Trapezoid = newTrapezoid(object@x, object@y, object@rule)
x = Trapezoid@x ## defines x and y values from inputs
y = Trapezoid@y
Answer = Trap(x, y) ## runs Trap on x and y
return(Answer) ## returns output of Trap
}
else if(object@rule == "Simpson"){ ## creates a new object of class simpson using inputs if rule selected is simpson (so that validity tests designed for simpson will be run)
Simpson = newSimpson(object@x, object@y, object@rule)
x = Simpson@x  ## defines x and y values from inputs
y = Simpson@y
Answer = Simpson(x, y) ## runs Simpson on x and y
return(Answer) ## returns output of Simpson
}
}
)
Integral = newIntegral(1:4, 1:4, "Trapezoid") ## test integral
Integral = newIntegral(1:4, 1:4, "Trapezoid") ## test integral
print(Integral) ## test
Integral4 = newIntegral(1:4, 1:4, "Sam") ## test integral
print(Integral) ## test
Integral1 = newIntegral(1:5, 5:9, "Simpson") ## test integral
print(Integral1) ## test
Integral2 = newIntegral(1:5, c(3,5,12,15), "Simpson") ## test integral
print(Integral2) ## test
checkRuleIntegral = function(object){ ## creates a function that forces the rule input to be Trapezoid or Simpson
if(object@rule != "Simpson" | object@rule != "Trapezoid"){
return("rule must be 'Simpson' or 'Trapezoid'")}
else{
return(TRUE)}
}
newIntegral(1:4, 1:4, "Trapezoid")
newIntegral(1:4, 1:4, "Face")
checkValidityIntegral = function(object){ ## feeds checkRuleIntegral into validity function for Integral
if (checkRuleIntegral(object) != TRUE){ ## returns an error message if the test does not pass
return("object is not a valid value")}
else{
return(TRUE)}
}
setValidity("Integral", checkValidityIntegral) ## sets checkValidityIntegral as the constraints for an object to be of class Integral
newIntegral(1:4, 1:4, "Trapezoid")
newIntegral(1:4, 1:4, "Trapezoid")
checkRuleIntegral(newIntegral(1:4, 1:4, "Trapezoid"))
